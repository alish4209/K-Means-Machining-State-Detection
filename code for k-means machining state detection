# Import important libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Step 1: Load the dataset
df = pd.read_csv("1_T72_01.csv")

# Step 2: Select features (Force components)
X = df[['Fx', 'Fy', 'Fz']]

# Step 3: Standardize the data (mean = 0, std = 1)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 4: Apply K-Means clustering (2 clusters: machining & non-machining)
kmeans = KMeans(n_clusters=2, random_state=42)
df['cluster'] = kmeans.fit_predict(X_scaled)

# Step 5: Identify which cluster corresponds to machining
cluster_means = df.groupby('cluster')[['Fx', 'Fy', 'Fz']].mean()
machining_cluster = cluster_means.mean(axis=1).idxmax()  # Cluster with highest average force

# Step 6: Extract machining period (start & end time)
machining_data = df[df['cluster'] == machining_cluster]
start_time = machining_data['time'].iloc[0]
end_time = machining_data['time'].iloc[-1]

# Step 7: Visualize the clusters
plt.figure(figsize=(10, 6))
plt.scatter(df['time'], df['Fz'], c=df['cluster'], cmap='viridis', s=10)
plt.xlabel("Time")
plt.ylabel("Fz Force (N)")
plt.title("Machining vs Non-Machining Detection using K-Means")
plt.show()

# Display machining period
print("Machining starts at:", start_time)
print("Machining ends at:", end_time)
